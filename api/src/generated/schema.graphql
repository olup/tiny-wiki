### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Mutation {
  createOneRole(data: RoleCreateInput!): Role!
  createOneUser(data: UserCreateInput!): User!
  deleteOnePage(where: PageWhereUniqueInput!): Page
  deleteOneRole(where: RoleWhereUniqueInput!): Role
  deleteOneUser(where: UserWhereUniqueInput!): User
  loginWithGoogleToken(token: String!): String!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOnePage(create: PageCreateInput!, update: PageUpdateInput!, where: PageWhereUniqueInput!): Page!
}

input MutationUpdateOneUserFilter {
  every: MutationUpdateOneUserWhereInput
  none: MutationUpdateOneUserWhereInput
  some: MutationUpdateOneUserWhereInput
}

input MutationUpdateOneUserWhereInput {
  AND: [MutationUpdateOneUserWhereInput!]
  editPages: MutationUpdateOneUserFilter
  locked: BooleanFilter
  NOT: [MutationUpdateOneUserWhereInput!]
  OR: [MutationUpdateOneUserWhereInput!]
  slug: StringFilter
  users: MutationUpdateOneUserFilter
  viewPages: MutationUpdateOneUserFilter
}

input MutationUpsertOnePageFilter {
  every: MutationUpsertOnePageWhereInput
  none: MutationUpsertOnePageWhereInput
  some: MutationUpsertOnePageWhereInput
}

input MutationUpsertOnePageWhereInput {
  AND: [MutationUpsertOnePageWhereInput!]
  editPages: MutationUpsertOnePageFilter
  locked: BooleanFilter
  NOT: [MutationUpsertOnePageWhereInput!]
  OR: [MutationUpsertOnePageWhereInput!]
  slug: StringFilter
  users: MutationUpsertOnePageFilter
  viewPages: MutationUpsertOnePageFilter
}

type Page {
  canEdit(after: String, before: String, first: Int, last: Int, skip: Int): [Role!]
  canView(after: String, before: String, first: Int, last: Int, skip: Int): [Role!]
  content: String
  draftOwner: User
  id: ID!
  slug: String!
  title: String!
}

input PageCreateInput {
  canEdit: RoleCreateManyWithoutCanEditInput
  canView: RoleCreateManyWithoutCanViewInput
  children: PageCreateManyWithoutChildrenInput
  content: String
  draftOwner: UserCreateOneWithoutDraftOwnerInput
  id: ID
  parent: PageCreateManyWithoutParentInput
  published: Boolean!
  slug: String!
  title: String!
}

input PageCreateManyWithoutChildrenInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutParentInput!]
}

input PageCreateManyWithoutDraftsInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutDraftOwnerInput!]
}

input PageCreateManyWithoutEditPagesInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutCanEditInput!]
}

input PageCreateManyWithoutParentInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutChildrenInput!]
}

input PageCreateManyWithoutViewPagesInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutCanViewInput!]
}

input PageCreateWithoutCanEditInput {
  canView: RoleCreateManyWithoutCanViewInput
  children: PageCreateManyWithoutChildrenInput
  content: String
  draftOwner: UserCreateOneWithoutDraftOwnerInput
  id: ID
  parent: PageCreateManyWithoutParentInput
  published: Boolean!
  slug: String!
  title: String!
}

input PageCreateWithoutCanViewInput {
  canEdit: RoleCreateManyWithoutCanEditInput
  children: PageCreateManyWithoutChildrenInput
  content: String
  draftOwner: UserCreateOneWithoutDraftOwnerInput
  id: ID
  parent: PageCreateManyWithoutParentInput
  published: Boolean!
  slug: String!
  title: String!
}

input PageCreateWithoutChildrenInput {
  canEdit: RoleCreateManyWithoutCanEditInput
  canView: RoleCreateManyWithoutCanViewInput
  content: String
  draftOwner: UserCreateOneWithoutDraftOwnerInput
  id: ID
  parent: PageCreateManyWithoutParentInput
  published: Boolean!
  slug: String!
  title: String!
}

input PageCreateWithoutDraftOwnerInput {
  canEdit: RoleCreateManyWithoutCanEditInput
  canView: RoleCreateManyWithoutCanViewInput
  children: PageCreateManyWithoutChildrenInput
  content: String
  id: ID
  parent: PageCreateManyWithoutParentInput
  published: Boolean!
  slug: String!
  title: String!
}

input PageCreateWithoutParentInput {
  canEdit: RoleCreateManyWithoutCanEditInput
  canView: RoleCreateManyWithoutCanViewInput
  children: PageCreateManyWithoutChildrenInput
  content: String
  draftOwner: UserCreateOneWithoutDraftOwnerInput
  id: ID
  published: Boolean!
  slug: String!
  title: String!
}

input PageUpdateInput {
  canEdit: RoleUpdateManyWithoutEditPagesInput
  canView: RoleUpdateManyWithoutViewPagesInput
  children: PageUpdateManyWithoutParentInput
  content: String
  draftOwner: UserUpdateOneWithoutDraftsInput
  id: ID
  parent: PageUpdateManyWithoutChildrenInput
  published: Boolean
  slug: String
  title: String
}

input PageUpdateManyDataInput {
  content: String
  id: ID
  published: Boolean
  slug: String
  title: String
}

input PageUpdateManyWithoutCanEditInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutCanEditInput!]
  delete: [PageWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutCanEditInput!]
  updateMany: [PageUpdateManyWithWhereNestedInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutCanEditInput!]
}

input PageUpdateManyWithoutCanViewInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutCanViewInput!]
  delete: [PageWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutCanViewInput!]
  updateMany: [PageUpdateManyWithWhereNestedInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutCanViewInput!]
}

input PageUpdateManyWithoutChildrenInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutChildrenInput!]
  delete: [PageWhereUniqueInput!]
  deleteMany: [MutationUpsertOnePageWhereInput!]
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutChildrenInput!]
  updateMany: [PageUpdateManyWithWhereNestedInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutChildrenInput!]
}

input PageUpdateManyWithoutDraftOwnerInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutDraftOwnerInput!]
  delete: [PageWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutDraftOwnerInput!]
  updateMany: [PageUpdateManyWithWhereNestedInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutDraftOwnerInput!]
}

input PageUpdateManyWithoutParentInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutParentInput!]
  delete: [PageWhereUniqueInput!]
  deleteMany: [MutationUpsertOnePageWhereInput!]
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [PageUpdateManyWithWhereNestedInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutParentInput!]
}

input PageUpdateManyWithWhereNestedInput {
  data: PageUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input PageUpdateWithoutCanEditDataInput {
  canView: RoleUpdateManyWithoutViewPagesInput
  children: PageUpdateManyWithoutParentInput
  content: String
  draftOwner: UserUpdateOneWithoutDraftsInput
  id: ID
  parent: PageUpdateManyWithoutChildrenInput
  published: Boolean
  slug: String
  title: String
}

input PageUpdateWithoutCanViewDataInput {
  canEdit: RoleUpdateManyWithoutEditPagesInput
  children: PageUpdateManyWithoutParentInput
  content: String
  draftOwner: UserUpdateOneWithoutDraftsInput
  id: ID
  parent: PageUpdateManyWithoutChildrenInput
  published: Boolean
  slug: String
  title: String
}

input PageUpdateWithoutChildrenDataInput {
  canEdit: RoleUpdateManyWithoutEditPagesInput
  canView: RoleUpdateManyWithoutViewPagesInput
  content: String
  draftOwner: UserUpdateOneWithoutDraftsInput
  id: ID
  parent: PageUpdateManyWithoutChildrenInput
  published: Boolean
  slug: String
  title: String
}

input PageUpdateWithoutDraftOwnerDataInput {
  canEdit: RoleUpdateManyWithoutEditPagesInput
  canView: RoleUpdateManyWithoutViewPagesInput
  children: PageUpdateManyWithoutParentInput
  content: String
  id: ID
  parent: PageUpdateManyWithoutChildrenInput
  published: Boolean
  slug: String
  title: String
}

input PageUpdateWithoutParentDataInput {
  canEdit: RoleUpdateManyWithoutEditPagesInput
  canView: RoleUpdateManyWithoutViewPagesInput
  children: PageUpdateManyWithoutParentInput
  content: String
  draftOwner: UserUpdateOneWithoutDraftsInput
  id: ID
  published: Boolean
  slug: String
  title: String
}

input PageUpdateWithWhereUniqueWithoutCanEditInput {
  data: PageUpdateWithoutCanEditDataInput!
  where: PageWhereUniqueInput!
}

input PageUpdateWithWhereUniqueWithoutCanViewInput {
  data: PageUpdateWithoutCanViewDataInput!
  where: PageWhereUniqueInput!
}

input PageUpdateWithWhereUniqueWithoutChildrenInput {
  data: PageUpdateWithoutChildrenDataInput!
  where: PageWhereUniqueInput!
}

input PageUpdateWithWhereUniqueWithoutDraftOwnerInput {
  data: PageUpdateWithoutDraftOwnerDataInput!
  where: PageWhereUniqueInput!
}

input PageUpdateWithWhereUniqueWithoutParentInput {
  data: PageUpdateWithoutParentDataInput!
  where: PageWhereUniqueInput!
}

input PageUpsertWithWhereUniqueWithoutCanEditInput {
  create: PageCreateWithoutCanEditInput!
  update: PageUpdateWithoutCanEditDataInput!
  where: PageWhereUniqueInput!
}

input PageUpsertWithWhereUniqueWithoutCanViewInput {
  create: PageCreateWithoutCanViewInput!
  update: PageUpdateWithoutCanViewDataInput!
  where: PageWhereUniqueInput!
}

input PageUpsertWithWhereUniqueWithoutChildrenInput {
  create: PageCreateWithoutChildrenInput!
  update: PageUpdateWithoutChildrenDataInput!
  where: PageWhereUniqueInput!
}

input PageUpsertWithWhereUniqueWithoutDraftOwnerInput {
  create: PageCreateWithoutDraftOwnerInput!
  update: PageUpdateWithoutDraftOwnerDataInput!
  where: PageWhereUniqueInput!
}

input PageUpsertWithWhereUniqueWithoutParentInput {
  create: PageCreateWithoutParentInput!
  update: PageUpdateWithoutParentDataInput!
  where: PageWhereUniqueInput!
}

input PageWhereUniqueInput {
  id: ID
  slug: String
}

type Query {
  findManyRole(after: String, before: String, first: Int, last: Int, skip: Int): [Role!]
  findManyUser(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  findOnePage(where: PageWhereUniqueInput!): Page
  listPages: [Page!]!
}

type Role {
  locked: Boolean!
  slug: ID!
}

input RoleCreateInput {
  editPages: PageCreateManyWithoutEditPagesInput
  locked: Boolean
  slug: ID
  users: UserCreateManyWithoutUsersInput
  viewPages: PageCreateManyWithoutViewPagesInput
}

input RoleCreateManyWithoutCanEditInput {
  connect: [RoleWhereUniqueInput!]
  create: [RoleCreateWithoutEditPagesInput!]
}

input RoleCreateManyWithoutCanViewInput {
  connect: [RoleWhereUniqueInput!]
  create: [RoleCreateWithoutViewPagesInput!]
}

input RoleCreateManyWithoutRolesInput {
  connect: [RoleWhereUniqueInput!]
  create: [RoleCreateWithoutUsersInput!]
}

input RoleCreateWithoutEditPagesInput {
  locked: Boolean
  slug: ID
  users: UserCreateManyWithoutUsersInput
  viewPages: PageCreateManyWithoutViewPagesInput
}

input RoleCreateWithoutUsersInput {
  editPages: PageCreateManyWithoutEditPagesInput
  locked: Boolean
  slug: ID
  viewPages: PageCreateManyWithoutViewPagesInput
}

input RoleCreateWithoutViewPagesInput {
  editPages: PageCreateManyWithoutEditPagesInput
  locked: Boolean
  slug: ID
  users: UserCreateManyWithoutUsersInput
}

input RoleUpdateManyDataInput {
  locked: Boolean
  slug: ID
}

input RoleUpdateManyWithoutEditPagesInput {
  connect: [RoleWhereUniqueInput!]
  create: [RoleCreateWithoutEditPagesInput!]
  delete: [RoleWhereUniqueInput!]
  deleteMany: [MutationUpsertOnePageWhereInput!]
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutEditPagesInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutEditPagesInput!]
}

input RoleUpdateManyWithoutUsersInput {
  connect: [RoleWhereUniqueInput!]
  create: [RoleCreateWithoutUsersInput!]
  delete: [RoleWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input RoleUpdateManyWithoutViewPagesInput {
  connect: [RoleWhereUniqueInput!]
  create: [RoleCreateWithoutViewPagesInput!]
  delete: [RoleWhereUniqueInput!]
  deleteMany: [MutationUpsertOnePageWhereInput!]
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutViewPagesInput!]
  updateMany: [RoleUpdateManyWithWhereNestedInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutViewPagesInput!]
}

input RoleUpdateManyWithWhereNestedInput {
  data: RoleUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input RoleUpdateWithoutEditPagesDataInput {
  locked: Boolean
  slug: ID
  users: UserUpdateManyWithoutRolesInput
  viewPages: PageUpdateManyWithoutCanViewInput
}

input RoleUpdateWithoutUsersDataInput {
  editPages: PageUpdateManyWithoutCanEditInput
  locked: Boolean
  slug: ID
  viewPages: PageUpdateManyWithoutCanViewInput
}

input RoleUpdateWithoutViewPagesDataInput {
  editPages: PageUpdateManyWithoutCanEditInput
  locked: Boolean
  slug: ID
  users: UserUpdateManyWithoutRolesInput
}

input RoleUpdateWithWhereUniqueWithoutEditPagesInput {
  data: RoleUpdateWithoutEditPagesDataInput!
  where: RoleWhereUniqueInput!
}

input RoleUpdateWithWhereUniqueWithoutUsersInput {
  data: RoleUpdateWithoutUsersDataInput!
  where: RoleWhereUniqueInput!
}

input RoleUpdateWithWhereUniqueWithoutViewPagesInput {
  data: RoleUpdateWithoutViewPagesDataInput!
  where: RoleWhereUniqueInput!
}

input RoleUpsertWithWhereUniqueWithoutEditPagesInput {
  create: RoleCreateWithoutEditPagesInput!
  update: RoleUpdateWithoutEditPagesDataInput!
  where: RoleWhereUniqueInput!
}

input RoleUpsertWithWhereUniqueWithoutUsersInput {
  create: RoleCreateWithoutUsersInput!
  update: RoleUpdateWithoutUsersDataInput!
  where: RoleWhereUniqueInput!
}

input RoleUpsertWithWhereUniqueWithoutViewPagesInput {
  create: RoleCreateWithoutViewPagesInput!
  update: RoleUpdateWithoutViewPagesDataInput!
  where: RoleWhereUniqueInput!
}

input RoleWhereUniqueInput {
  slug: ID
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: ID!
  roles(after: String, before: String, first: Int, last: Int, skip: Int): [Role!]
}

input UserCreateInput {
  drafts: PageCreateManyWithoutDraftsInput
  email: String!
  id: ID
  name: String
  roles: RoleCreateManyWithoutRolesInput
}

input UserCreateManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRolesInput!]
}

input UserCreateOneWithoutDraftOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDraftsInput
}

input UserCreateWithoutDraftsInput {
  email: String!
  id: ID
  name: String
  roles: RoleCreateManyWithoutRolesInput
}

input UserCreateWithoutRolesInput {
  drafts: PageCreateManyWithoutDraftsInput
  email: String!
  id: ID
  name: String
}

input UserUpdateInput {
  drafts: PageUpdateManyWithoutDraftOwnerInput
  email: String
  id: ID
  name: String
  roles: RoleUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  email: String
  id: ID
  name: String
}

input UserUpdateManyWithoutRolesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutRolesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [MutationUpsertOnePageWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRolesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRolesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: MutationUpsertOnePageWhereInput!
}

input UserUpdateOneWithoutDraftsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDraftsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutDraftsDataInput
  upsert: UserUpsertWithoutDraftsInput
}

input UserUpdateWithoutDraftsDataInput {
  email: String
  id: ID
  name: String
  roles: RoleUpdateManyWithoutUsersInput
}

input UserUpdateWithoutRolesDataInput {
  drafts: PageUpdateManyWithoutDraftOwnerInput
  email: String
  id: ID
  name: String
}

input UserUpdateWithWhereUniqueWithoutRolesInput {
  data: UserUpdateWithoutRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutDraftsInput {
  create: UserCreateWithoutDraftsInput!
  update: UserUpdateWithoutDraftsDataInput!
}

input UserUpsertWithWhereUniqueWithoutRolesInput {
  create: UserCreateWithoutRolesInput!
  update: UserUpdateWithoutRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
